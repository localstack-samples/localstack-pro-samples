service: test-layers

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  deploymentBucket:
    name: testbucket

functions:
  hello:
    handler: handler.hello
    layers:
      - { Ref: TestLambdaLayer }
    events:
      - schedule: "cron(0 * * * ? *)"
      - http:
          path: "/"
          method: "get"
          integration: "lambda-proxy"
          authorizer: authorizerFunc
  authorizerFunc:
    handler: handler.authorizerFunc
    layers:
      - { Ref: TestLambdaLayer }
  hello1:
    handler: handler.hello
    events:
      - http:
          path: "/1"
          method: "get"
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer

layers:
  test:
    path: layer

resources:
  Resources:
    ApiGatewayRestApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Name: "${self:provider.stage}-${self:service}"
    GatewayResponseDefault400:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: "DEFAULT_4XX"
        ResponseTemplates:
          application/json: '{"errors":[{"message":"Custom text."}]}'
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: p1
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        UserPoolId:
          Ref: UserPool
        ClientName: c1
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        IdentitySource: method.request.header.Authorization
        Name: CognitoAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !Sub arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/#{UserPool}
  Outputs:
    RestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: "${self:provider.stage}-${self:service}ServiceEndpoint"

plugins:
  - serverless-localstack
  - serverless-pseudo-parameters

custom:
  localstack:
    stages:
      - local
